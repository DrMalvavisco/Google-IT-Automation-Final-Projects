#!/usr/bin/env python3

import json
import locale
import sys
from reports import generate as report
from emails import generate as email_generate
from emails import send as email_send

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
  
  max_sales = (None, None)

  for element in data:
    if (max_sales[1] is None) or (element['total_sales'] > max_sales[1]):
      max_sales = (element['car']['car_model'], element['total_sales'])

  max_string = 'The {} had the most sales: {}'.format(max_sales[0], max_sales[1])
  # TODO: also handle max sales
  popular_year = {}
  for element in data:
    popular_year[element['car']['car_year']] = popular_year.get(element['car']['car_year'], 0) + element['total_sales']

  sorted_popular_year = sorted(popular_year.items(), key = lambda x: x[1], reverse=True)

  popular_string = 'The most popular year was {} with {} sales.'.format(sorted_popular_year[0][0], sorted_popular_year[0][1])
  # TODO: also handle most popular car_year

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),max_string,popular_string
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  new_summary = '<br/>'.join(summary)
  print(summary)
  # TODO: turn this into a PDF report
  report('/tmp/cars.pdf', "Cars report", new_summary, cars_dict_to_table(data))
  # TODO: send the PDF report as an email attachment
  msg = email_generate("automation@example.com", "student-00-1f281f41b3b8@example.com",
                         "Sales summary for last month", new_summary, "/tmp/cars.pdf")
  email_send(msg)

if __name__ == "__main__":
  main(sys.argv)
